<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>宝塔Docker自建Bitwarden密码管理服务</title>
      <link href="376a.html"/>
      <url>376a.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://bitwarden.com/">Bitwarden</a>是一个跨平台的密码管理软件，类似于 1Password、EnPass、LastPass 等。Bitwarden 是免费开源的，可以将服务端部署在自己的服务器上，比如群晖，并且支持 Docker 部署。但官方的镜像要求至少 2G 以上内存，要求比较高。有人用 Rust 实现了 Bitwarden 服务器，项目叫 <a href="https://github.com/dani-garcia/bitwarden_rs">bitwarden_rs</a>，并且提供了 Docker 镜像，这个实现更进一步降低了对机器配置的要求，并且 Docker 镜像体积很小，部署非常方便。另外可以用腾讯云 <a href="https://console.cloud.tencent.com/cdn/access">CDN</a>服务隐藏我们的服务器真实IP以及实现访问加速。</p><h3 id="1-BitWarden好处都有啥？"><a href="#1-BitWarden好处都有啥？" class="headerlink" title="1. BitWarden好处都有啥？"></a>1. BitWarden好处都有啥？</h3><ul><li>开源（好像是大部分开源）</li><li>可以自建</li><li>不要钱（指自建就不需要额外花钱买服务）</li><li>客户端比LastPass好看+好用</li><li>可以同步TOTP密钥</li><li>官方服务器中需要付费订阅的一些功能，在自建中是免费的</li></ul><h3 id="2-宝塔安装Docker"><a href="#2-宝塔安装Docker" class="headerlink" title="2. 宝塔安装Docker"></a>2. 宝塔安装Docker</h3><p>进入到宝塔面板的软件商店，搜索docker安装即可</p><p><img src="https://img.zzf.red//20200801011631.png#vwid=1247&vhei=489"></p><h3 id="3-获取镜像"><a href="#3-获取镜像" class="headerlink" title="3. 获取镜像"></a>3. 获取镜像</h3><p>打开docker管理器，点击获取镜像，输入Bitwarden_rs的官方镜像<code>bitwardenrs/server</code>后点击获取镜像。</p><p><img src="https://img.zzf.red//20200801011742.png#vwid=850&vhei=596" alt="c14a8df9528d3"></p><h3 id="4-创建容器"><a href="#4-创建容器" class="headerlink" title="4.创建容器"></a>4.创建容器</h3><p>1.点击创建容器按钮<br>2.填写端口映射中的  <code>容器端口</code>：<code>80</code>,<code>服务端口</code>：<code>6666</code>6666可以自定义<br>3.填写目录映射中的<code>服务器目录</code>：<code>/www/wwwroot/xxx.zzf.red</code>(该目录可以自定义，这里用网址作为目录)，<code>容器目录</code>：<code>/data</code><br> 4.填写内存配额，根据自己服务器的配置按需填写<br>5.提交创建容器<br>6.点击容器名称，修改容器名称为<code>Bitwarden</code>以方便辨认<br><img src="https://img.zzf.red//20200801012025.png#vwid=631&vhei=719" alt="Snipaste_2020-08-01_01-20-05"></p><h3 id="5-添加站点"><a href="#5-添加站点" class="headerlink" title="5.添加站点"></a>5.添加站点</h3><p>在宝塔里面添加一个站点，FTP、数据库均不用创建，PHP版本选择纯静态。目录选择刚才创建的服务器目录</p><p>网站添加完成后设置SSL，自己准备证书，或者用免费的Let’s Encrypt，设置完毕后开启强制Https。</p><p>最后添加一个反向代理，名称随意填，目标URL为<code>http://127.0.0.1:6666</code>，端口号和上面<code>创建容器</code>时<code>服务端口</code>保持一致。<img src="https://img.zzf.red//20200801013443.png#vwid=806&vhei=569" alt="Snipaste_2020-08-01_01-34-09"></p><p><strong>上述步骤都做完后别忘了在宝塔面板安全-防火墙中放行端口<code>6666</code>。</strong></p><h3 id="6-启用CDN"><a href="#6-启用CDN" class="headerlink" title="6. 启用CDN"></a>6. 启用CDN</h3><p><strong>CDN配置步骤如下：</strong></p><h4 id="1-激活服务"><a href="#1-激活服务" class="headerlink" title="1. 激活服务"></a>1. 激活服务</h4><p>打开腾讯云CDN管理界面，确认已经激活服务：<a href="https://console.cloud.tencent.com/cdn/access">https://console.cloud.tencent.com/cdn/access</a></p><h4 id="2-添加域名"><a href="#2-添加域名" class="headerlink" title="2. 添加域名"></a>2. 添加域名</h4><p>点击添加域名：<code>xxx.zzf.red</code> 如图：</p><ul><li>源站地址填写服务器IP+上文bitwarden容器的<code>服务端口</code>6666</li><li>回源协议选择 HTTP</li></ul><h4 id="3-缓存配置"><a href="#3-缓存配置" class="headerlink" title="3. 缓存配置"></a>3. 缓存配置</h4><ul><li>将全部类型-所有文件的刷新时间改为0天，即不缓存</li><li>新增一个文件类型，内容为：.jpg;.png;.css;.woff;.woff2;.svg，刷新时间设置为30天或更长，即静态文件缓存到CDN</li><li>调整下优先级，确保需要缓存的规则放到最前，全部-所有文件这个兜底类型放到最后。<h4 id="4-域名解析"><a href="#4-域名解析" class="headerlink" title="4. 域名解析"></a>4. 域名解析</h4>在基本配置界面找到CDN给分配的CNAME地址，然后前往你的DNS管理添加 <code>CNAME</code>记录 名字为你的网站前缀，记录值为DN给分配的CNAME地址</li></ul><p><strong>做完以上配置，我们就可以正常访问Bitwarden的后台管理了</strong></p><h3 id="7-关闭注册"><a href="#7-关闭注册" class="headerlink" title="7. 关闭注册"></a>7. 关闭注册</h3><p>最后，因为我们部署Bitwarden是私人使用场景，因此需要修改下Bitwarden的容器启动脚本，将前面的SIGNUPS_ALLOWED=true改为SIGNUPS_ALLOWED=false，也就是禁止用户注册。具体步骤如下：</p><h4 id="1-删除容器"><a href="#1-删除容器" class="headerlink" title="1. 删除容器"></a>1. 删除容器</h4><p>在docker管理器中点击刚才创建的容器的状态绿色图标，停止容器运行，然后删除容器（删除容器后不会删除数据）</p><h4 id="2-重新运行容器"><a href="#2-重新运行容器" class="headerlink" title="2. 重新运行容器"></a>2. 重新运行容器</h4><p> 在VPS中运行下面的命令重新运行容器，其中<code>Bitwarden</code>为容器的名字，<code>SIGNUPS_ALLOWED=false</code>代表禁止注册，<code>/www/wwwroot/xxx.zzf.red</code>为上面创建容器时所写的<code>服务器目录</code>,<code>/data</code>为容器目录，<code>6666:80</code>代表上面创建容器时的<code>服务端口:容器端口</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name Bitwarden \</span><br><span class="line">  -e SIGNUPS_ALLOWED=false \</span><br><span class="line">  -v /www/wwwroot/xxx.zzf.red/:/data/ \</span><br><span class="line">  -p 6666:80 \</span><br><span class="line">  bitwardenrs/server:latest</span><br></pre></td></tr></table></figure><p>运行完成后在容器列表里就又能看到了。<br>然后再去试下创建账号就会出现一个不能创建账号的错误提示。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VPS 手动在线一键重装系统脚本整理</title>
      <link href="9d46.html"/>
      <url>9d46.html</url>
      
        <content type="html"><![CDATA[<h2 id="VPS-手动在线一键重装系统脚本整理"><a href="#VPS-手动在线一键重装系统脚本整理" class="headerlink" title="VPS 手动在线一键重装系统脚本整理"></a>VPS 手动在线一键重装系统脚本整理</h2><p>总有一些 VPS 商家会对服务器系统动一些小手脚，又或者一些坑爹商家面板出 bug 导致无法正常重装系统。这时我们都可以尝试使用某些大佬制作的一键重装系统脚本，只要你还能使用 SSH 连接 VPS，剩下操作都十分简单。</p><p>本文只介绍 Linux 系统在服务器上的重装，Windows 系统由于版权因素还是建议使用官方的方法进行安装。</p><h3 id="1-CentOS-6-9-及以下"><a href="#1-CentOS-6-9-及以下" class="headerlink" title="1. CentOS 6.9 及以下"></a>1. CentOS 6.9 及以下</h3><blockquote><p>来源:<a href="moeclub.org">萌咖</a><br>适用于由 GRUB 引导的 CentOS 系统，使用官方发行版去掉模板预装的软件。同时也可以解决内核版本与软件不兼容的问题。只要有 root 权限,还您一个纯净的系统</p><p><strong>不适用于 <code>OpenVZ</code> 架构！</strong></p></blockquote><p>首先更新已有工具包，并安装所需软件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install -y xz openssl gawk coreutils file</span><br></pre></td></tr></table></figure><p>之后下载脚本及使用（默认 root 密码：<code>Vicer</code>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO CentOSNET.sh &#x27;https://moeclub.org/attachment/LinuxShell/CentOSNET.sh&#x27; &amp;&amp; chmod a+x CentOSNET.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">        bash CentOSNET.sh       -c/--centos [dist-version]     #系统版本</span><br><span class="line">                                -v/--ver [32/i386|64/amd64]    #指定格式</span><br><span class="line">                                --ip-addr/--ip-gate/--ip-mask  #网络参数（默认自动识别）</span><br><span class="line">                                -yum/--mirror                  #自定义镜像源</span><br><span class="line">                                -a/-m                          #全自动安装/VNC安装</span><br></pre></td></tr></table></figure><p>示例（从指定源全自动安装 64 位 CentOS 6.9）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh CentOSNET.sh -c 6.9 -v 64 -a --mirror &#x27;http://mirror.centos.org/centos&#x27;</span><br></pre></td></tr></table></figure><p>仅支持 CentOS 6.9 及以下版本，暂不支持 CentOS 7。</p><h3 id="2-CentOS-7"><a href="#2-CentOS-7" class="headerlink" title="2.CentOS 7"></a>2.CentOS 7</h3><blockquote><p>来源 <a href="https://blog.hicasper.com/post/135.html">hiCasper</a></p><p>本一键脚本在萌咖大佬的脚本基础上开发，实现了懒人式一键网络重装 Debian / Ubuntu / CentOS 系统及dd方式安装系统。解决了云服务商提供模板镜像体积过大、预装软件过多、不够纯净等问题。</p></blockquote><p>此脚本支持 CentOS 7 安装（仅 DD）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O AutoReinstall.sh https://git.io/AutoReinstall.sh &amp;&amp; bash AutoReinstall.sh</span><br></pre></td></tr></table></figure><p>输入编号选择你需要的系统，之后会提示 root 密码，只需等待一会便会全自动安装完成。</p><p><strong>支持重装的系统</strong></p><ul><li>Ubuntu 18.04/16.04</li><li>Debian 9/10</li><li>CentOS 6</li><li>CentOS 7 （DD方式）</li><li>自定义DD镜像</li></ul><p><strong>特性 / 优化</strong></p><ul><li>自动获取IP地址、网关、子网掩码</li><li>自动判断网络环境，选择国内/外镜像，解决速度慢的问题</li><li>懒人一键化，无需复杂的命令</li><li>解决萌咖脚本中一些导致安装错误的问题</li><li>CentOS 7 镜像抛弃LVM，回归ext4，减少不稳定因素</li></ul><p><strong>注意</strong></p><ul><li>重装后系统密码均在脚本中有提供，<strong>安装后请尽快修改密码</strong>，Linux系统建议启用密钥登陆。</li><li>OpenVZ / LXC 架构系统不适用</li></ul><h3 id="3-Debian-Ubuntu"><a href="#3-Debian-Ubuntu" class="headerlink" title="3. Debian/Ubuntu"></a>3. Debian/Ubuntu</h3><blockquote><p>来源:<a href="moeclub.org">萌咖</a></p><p>仍是 萌咖 大佬的一键脚本，同样不适用于 <code>OpenVZ</code> 架构</p></blockquote><p>更新工具包，安装所需软件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install -y xz-utils openssl gawk file</span><br></pre></td></tr></table></figure><p>下载脚本及使用（默认 root 密码：<code>MoeClub.org</code>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -qO InstallNET.sh &#x27;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#x27; &amp;&amp; chmod a+x InstallNET.sh</span><br><span class="line">Usage:</span><br><span class="line">        bash InstallNET.sh      -d/--debian [dist-name]</span><br><span class="line">                                -u/--ubuntu [dist-name]</span><br><span class="line">                                -c/--centos [dist-version]</span><br><span class="line">                                -v/--ver [32/i386|64/amd64]</span><br><span class="line">                                --ip-addr/--ip-gate/--ip-mask</span><br><span class="line">                                -apt/-yum/--mirror</span><br><span class="line">                                -dd/--image</span><br><span class="line">                                -a/-m</span><br><span class="line"></span><br><span class="line"># dist-name: 发行版本代号</span><br><span class="line"># dist-version: 发行版本号</span><br><span class="line"># -apt/-yum/--mirror : 使用定义镜像</span><br><span class="line"># -a/-m : 询问是否能进入VNC自行操作. -a 为不提示(一般用于全自动安装), -m 为提示.</span><br></pre></td></tr></table></figure><p>示例（默认源一键重装 64 位 Debian 8）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh InstallNET.sh -d 8 -v 64 -a</span><br></pre></td></tr></table></figure><p><strong>重装系统可能需要 10 - 30 分钟不等，请耐心等待。安装完成后默认使用 22 端口进行 SSH 连接。</strong></p><p><strong>这里收集的脚本都支持一键安装，对我等小白特别友好。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运营商链路简评&amp;鉴别（163/169/CN2等)</title>
      <link href="a2f2.html"/>
      <url>a2f2.html</url>
      
        <content type="html"><![CDATA[<p>市面上的服务器租赁商提供的产品种类繁多，各路aff在推荐的时候往往吹的天花乱坠。博主最近恰好在正式上课前略有空闲，想了一下也不知道该写一些什么。偶然想到一直以来问如何鉴别CN2 GT和GIA的很多，这次就展开这个话题来简单聊聊国内这几种网络该如何辨别、究竟是怎么样的一个存在，顺便也简单对一些误区做些说明。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-23_14-27-27.jpg#vwid=1200&vhei=600" alt="img"></p><p>大陆的主流国际网络有电信电信163、电信CN2、、联通169、联通AS9929、移动CMI以及教育网CERNET/CNGI和科技网CSTNET，其他比如铁通、鹏博士等网络不具有国际出口，故不在本文的讨论范围。</p><hr><h2 id="零、概念简述"><a href="#零、概念简述" class="headerlink" title="零、概念简述"></a>零、概念简述</h2><h3 id="①-国际互联层"><a href="#①-国际互联层" class="headerlink" title="① 国际互联层"></a>① 国际互联层</h3><p>根据电信的资料，一般的国际流量在跨境时要经过的互联层为【<strong>C-I-X-S-F】</strong>，这一套同样适用于联通移动。这其中<strong>C</strong>段为国内核心层，对应北上广城域网的超级汇聚；<strong>I</strong>段为国际出口层，对应北上广的国际出口互联点；<strong>X</strong>和<strong>S</strong>段为国际交换层，对应三大运营商位于海外互联的汇聚；<strong>F</strong>为国际接入层，也就是我们经常提到的POP，用来供给企业等服务商接入网络的接入点。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-23_13-03-22.jpg#vwid=1054&vhei=432" alt="img"></p><p>目前民用网络的拥塞原因主要是C-I段容量不足，由图中亦可看到丢包是发生在C-I段交互后，这一段的网络受政策因素以及成本的影响运营商并不愿意主动扩容这一段网络，网络上可以查到上一次的电信2016上海汇聚扩容招标项目耗资18亿元。</p><hr><h3 id="②-带宽接入及结算"><a href="#②-带宽接入及结算" class="headerlink" title="② 带宽接入及结算"></a>② 带宽接入及结算</h3><p>在欧洲和北美以外的地区，基础网络运营商之间的互联不是免费的。如果问基础运营商是什么，比较不准确的说就是有服务于家庭或一般企业的网络运营商，能够为其互联网用户提供内容；与此相对，诸如Google、Microsoft之类虽然参与了基础网络建设，但是他们是作为内容提供者的角色存在，需要向基础网络运营商支付带宽费用以满足末端用户的需求。</p><p>特别是在亚太地区，本土运营商在基础网络建设中投入了大量的资金，也不存在像欧美互联中心主导的T1免费互联，所以接入本土运营商意味着要向对方支付较高的流量费用。我国普惠家宽的政策使得商用带宽的价格远高于周边国家，整体定价的策略是香港最高，美国最低，接入价格差异可以达到20倍左右。</p><p>这里还需要提到一个概念，就是越高级别的骨干网接入的费用越高，因为末端骨干接入多数流量不一定会占用更高一级的骨干网，但是高级的骨干网意味着到末端整条链路的带宽占用，国际出口恰好就站在这个制高点。同时地理位置越近对大陆的运营商而言同时意味着更高的优先级和更低的QoS级别，至于欧美便宜的原因在于欧美互联网中心的连通性支持使得三大运营商也是受益方。</p><p>接入一家运营商的网络，有接入点POP接入、点对点电路等方式，最常见的是通过POP接入。POP多数情况下就是指运营商位于海外的接入点，也就是上文F层的存在；还有就是像NTT这样在亚太非常强势的运营商，曾经还在上海建立过POP，与电信的互联就是点对点电路直达I段。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-24_21-40-15-1.png#vwid=987&vhei=253" alt="img"></p><p>作为机房而言，连接到大陆既可以向大陆运营商直接购买带宽接入POP，也可以接入一些本土运营商比如Telia/Cogent之流再通过他们与运营商的互联到达大陆。如果你通过本地运营商，比如Cogent这样的廉价商宽，它与三大运营商的互联是有限的，大量带宽的出售导致其部分方向出口容量不足。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-24_21-40-15.png#vwid=877&vhei=180" alt="img"></p><p>另外POP到大陆的总带宽也是固定的，比如移动香港POP到大陆带宽不够，即使你在香港接入了足量到达POP的带宽，也会因为I-X/S段拥塞导致网络质量不及预期。但是不管怎么说，对于大陆优化的机房起码要直接接入CTG的POP，这样至少到POP的带宽是可以保证的，不像PCCW的<code>Mainland Access</code>对电信方向流量进行主动QoS。</p><hr><h3 id="③-TraceRoute"><a href="#③-TraceRoute" class="headerlink" title="③ TraceRoute"></a>③ TraceRoute</h3><p>大规模的网络互联，极少有两点连线式的网络结构，所有的网络流量都要经过BRAS、市级汇聚、省级汇聚再到核心汇聚再前往目的地，中间的路径是由路由表确定的。每经历一级交换机，TTL值会自动加1，直到到达目的IP或TTL达到上限255，所以当我们用从1开始用递增的TTL向某个IP发送ICMP/TCP请求时，能够得到来自中间的交换机的响应，由此即可勾画出到达该IP所经历的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-23_13-15-21.png#vwid=815&vhei=323" alt="img"></p><p>在TraceRoute中常常会遇到中间返回*的情况，这是由于发送的TTL值未得到任何的交换机响应，可能是屏蔽亦可能是不存在对应交换机；再就是比如DDoS-GUARD这样的服务商在进入其骨干网后屏蔽了ICMP协议，我们便无法通过ICMP测得在其骨干网中的路由情况，这也是对于自身骨干网的一种简单保护。</p><hr><h3 id="④-MTR"><a href="#④-MTR" class="headerlink" title="④ MTR"></a>④ MTR</h3><p>mtr和traceroute的原理是相同的，不同在于traceroute仅进行一次发包获取路径，而mtr是通过重复发包获得发出与收到数据包的比例来得到一个丢包率的数据，通过对经过每一级交换机的丢包信息可以得到对网络问题以及质量的诊断。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-23_13-25-09.png#vwid=1014&vhei=388" alt="img"></p><p>在交换机工作中，当负载较高时不会积极响应ICMP包，这就造成MTR中可能存在中间某一跳丢包明显高于前后的现象（如图中14跳），这是正常现象。在去程与回程相同的情况下，丢包率在MTR中应当是逐级上升的，在实际测试中由于诸多因素这一数据会有一些浮动，但是有一点最终丢包率的判定应使用最后一跳即目标的数据，其他异常数据比如前面提到的异常高丢包在我们进行判定的过程中应当忽略掉这一数据。</p><hr><h3 id="⑤-BestTrace"><a href="#⑤-BestTrace" class="headerlink" title="⑤ BestTrace"></a>⑤ BestTrace</h3><p><code>besttrace</code>是<code>ipip.net</code>制作的一个简单、便捷的网络工具，官网地址（<a href="https://www.ipip.net/">点击前往</a>）。具有较为美观的TraceRoute、MTR等功能，能够在获取路径交换机的IP同时给予一个IP的运营商、地域归属信息，极大地方便了我们对于路由的判断。</p><p>即使ipip.net是国内IP地址库更新最快的，它也不是实时的数据，当运营商部分变动时它也做不到第一时间更新。再就是阿里云、腾讯云内网使用的<code>11.0.0.0/8</code>和<code>9.0.0.0/8</code>分别为美国国防部和IBM持有的IP，地图上就会显示路由绕了美国一圈。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-23_13-37-03.png#vwid=789&vhei=346" alt="img"></p><p>所以路径的判断一定要根据实际情况，同样比如到达广州的国际出口后突然出现一个显示为南京的IP，这时我们就要根据前后的延迟判定它究竟有没有去南京，出现这种情况一般是运营商变动了互联点IP，地址库未及时更新。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-23_13-44-42.png#vwid=1017&vhei=346" alt="img"></p><p>IPIP.NET的Windows端在这里就不再赘述，主要讲讲Linux端的使用。IPIP提供的包是预编译的二进制包，下载后选择对应的版本直接添加执行权限运行即可。</p><p>BestTrace</p><p>Shell</p><table><thead><tr><th>123456789101112131415</th><th>#添加执行权限chmod +x besttrace #执行路由测试./besttrace IP_Address #常用附加参数-q 1  //仅追踪一次-T   //使用TCP模式追踪-6   //使用IPv6追踪-g cn //切换中文显示-g en //切换英文显示 #使用举例./besttrace -q 1 1.1.1.1 -T -g cn</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>其中TCP追踪的用途在识别一些玩弄手段的服务商时十分有用，绝大多数情况下ICMP和TCP路由是配置成相同的，我们测试的<code>mtr</code>和<code>traceroute</code>默认也是使用ICMP来进行追踪。我们日常使用的http协议等都是基于TCP传输的，有些不法商家便让ICMP走CN2而TCP走163，表面测上去光鲜亮丽，实际使用上便露出原形。在交换机的配置中甚至连TCP大小包都可以设置走不同的路由，所以在测试路由时，最起码一定要同时测一下TCP路由是不是和ICMP的一致。我这里刚好就有个CERA香港的例子，ICMP走香港CN2而实际上TCP走了东京CN2，多出来的24ms延迟也说明它确实经过了日本。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-24_22-04-31.png#vwid=982&vhei=181" alt="img"></p><p>接入CN2的话，也可以分为大陆方向三网均走CN2或者单电信走CN2，二者的价格是有差异的。从电信直接购买的容量一般情况下是仅供电信用户使用的，因为如果要进行跨网的话就需要电信作为利益方为联通或者移动支付一定的Transit费用，并由电信向移动联通请求相应IP的路由表，当然这个相比于CN2的售价也就贵20%左右。</p><p>更多的情况服务商在买了CN2容量之后是选择通过BGP路由策略调整，比如搬瓦工DC6等，强制将流量发往CN2互联点，由于移动的路由策略去程就做不到走CN2骨干去。</p><hr><h2 id="一、中国电信"><a href="#一、中国电信" class="headerlink" title="一、中国电信"></a>一、中国电信</h2><p>中国电信运营有两个主要的骨干网，分别为163民用网（AS4134）和CN2精品网（AS4809），骨干网IP分别是<code>202.97</code>和<code>59.43</code>。电信的精品网全称是<code>ChinaNet Next Carrier Network</code>，简称CNCN或CN2，流量级别在400G左右。CN2网络的建设电信投入了大量的资金购买了Telia、NTT等T1运营商的Transit，同时在国内使用专用的汇聚点，能够保证互联的稳定性。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-25_10-13-14.png#vwid=936&vhei=200" alt="img"></p><p>接入CN2骨干网可以在国内接入本地CN2，价格以江沪浙最低、内陆价格递增；也可以机房在境外接入，分为GT和GIA两项业务，GT即<code>Global Transit</code>、GIA即<code>Global Internet Access</code>。GT业务仅存在于北美，价格是GIA的1/4，国内汇聚点与163共用，质量并没有比163好很多，况且由于CN2骨干网趋于饱和电信已经取消了GT业务的售卖。从163网络前往GIA则是去程走163骨干网前往最近的CN2互联点，回程绝大多数省份可以直接到达城域网；GT则只能在北上广进行互联。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-25_10-11-26.png#vwid=1058&vhei=257" alt="img"></p><p>CN2与163的互联点在最近三年都没有扩容的迹象，比如南京的互联点拥塞严重甚至出现了间歇丢包的情况。如果考虑DDoS防护和速度的均衡，像CERA洛杉矶这样采用163去程CN2回程的是很好的选择。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-25_10-09-28.png#vwid=970&vhei=336" alt="img"></p><p>至于GT与GIA的区别，个人就推荐一个最简单的方法，在IPIP.NET选择一个四川电信的节点，如果去程在成都进入CN2骨干网就是GIA，如果在上海或者广州那就是GT。此方法同样适用于陕西、江苏等具有CN2民用互联点的省份，只要出现了在北上广外跨入CN2骨干网则一定是GIA网络。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-25_10-03-42.png#vwid=1302&vhei=655" alt="img"></p><p>电信内部对于AS4809的路由隔离没有特殊的要求，向下发送路由表就能够改变路由策略，曾经在CN2骨干网负载较低时不少企业同时购买GT和GIA并使用GT的容量偷跑GIA，其中不乏较大的企业如Zenlayer等，今年早些时候都受到了处罚。当然也有阿里云这样反向操作的，本身阿里云在香港没有购买GT，因为轻量服务器为了差异化禁播了AS4809，去程收不到CN2的路由，回程变为CN2 GT，实际上在使用购买的GIA容量跑GT。</p><hr><h2 id="二、中国联通"><a href="#二、中国联通" class="headerlink" title="二、中国联通"></a>二、中国联通</h2><p>中国联通运营有两个具有国际出口的骨干网，分别是CHINA-169民用网（AS4837）和联通工业网（AS9929）。</p><p>其中AS9929是中国网通（China Netcom / CNC）曾经在用的骨干网，在改组重分并入联通后被联通作为精品网进行建设；在2017年更名为CHINA UNICOM Industrial Internet Backbone，简称CUII，常被叫做联通工业网、联通A网。与电信重金建设的CN2不同，AS9929表现优良更大程度是因为负载较低，其网络完备程度、设备可靠性都是低于CN2的。比如AS9929到达北美上游Verizon，曾经都是通过自家AS4837的互联点完成的互联，并没有完全独立出来。</p><p>民用网169这边其实没有太多能够讲的，虽然与电信结构类似，但是联通在亚太地区接驳NTT的容量足够大，互联体验是比电信好很多。北美方向因为TPE数次断缆，到联通北美AS19174似乎已经放弃治疗了，延迟一度达到300ms左右。联通在欧洲接驳的上游仅有Telia和GTT，并且设置了一定的门槛，这也导致联通到欧洲基本上都绕美的。</p><p>联通在国内的北上广汇聚各司其职，与电信的汇聚之间功能平行不同，这也是取决于体量的。其互联点与经过的汇聚是相对固定的，比如QN机房就是北京-洛杉矶、VPLS就是上海-圣何塞。不同的路径之间往往差异比较大，比如现在到北美仅有上海-圣何塞的延迟是非常漂亮的。</p><p>联通海外POP接入其实卖的比电信贵一些，加上联通一直在吃老底，风险应对能力相对比较弱，国内机房专用其作为海外出口接入的寥寥无几。很简单的例子，比如在面对TPE、APCN2断缆时联通直接就是延时上天，而无法快速有效调度。</p><p>总而言之，联通还是一直在啃老底，而且还啃的很香……关键是用的人少，所以一直还在爆炸的路上。相比于电信到哪都比较平庸的质量，联通各方向的好坏差异比较大，你能用比较低的成本选择一个合适的方向（比如远东RT/TTK）。</p><hr><h2 id="三、中国移动"><a href="#三、中国移动" class="headerlink" title="三、中国移动"></a>三、中国移动</h2><p>中国移动运营有CMNET、CMHK、CMI三张骨干网，其中CMI为CMNET和CMHK提供国际网络Transit。</p><p>CMI出售的带宽仅保证本地速度，不保证到达CMNET的速度。这里就想说一句，香港移动即使是香港最便宜的大陆直连带宽，也要十几刀1M，还是比北美CN2贵，而且那个质量是很一言难尽的。</p><p>切记不要被延迟冲昏了头脑，一切还是要以实际体验为准的～</p><hr><h2 id="四、中国教育网"><a href="#四、中国教育网" class="headerlink" title="四、中国教育网"></a>四、中国教育网</h2><p>中国教育网（<code>AS4538</code>）是由赛尔网络运营的中国学术网络，接入单位为高校或学术单位，较新的CERNET骨干网为<code>101.4</code>。</p><p>教育网的带宽费用相比于三大运营商是很贵的，确切的消息是卖到了一年30万/G，而且网络质量并不好。2019年下半年教育网互联点出现了严重的拥塞，晚上到电信的延迟可以达到120ms以上，直连香港拥塞到300ms以上，年初进行了一次扩容，网络质量略有上升。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-07-20_14-18-30.jpg#vwid=668&vhei=241" alt="img"></p><p>教育网的国际网络很简单，物理电路有2<em>10G到洛杉矶、2</em>10G到欧洲以及去年年底从联通买的一根100G到香港。IPv4香港方向接入了20G的Telstra，北美方向接入了10G的TATA，到欧洲的10G是接到欧洲教育网GEANT的，不承载公网流量，其他海外几个海外高校的接入不清除具体情况。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2019-07-02_08-18-26.png#vwid=720&vhei=239" alt="img"></p><p>另一个就是<code>China Next Generation Internet</code>，简称CNGI（<code>AS23911</code>），也就是CERNET2，教育网的IPv6出口网络，同时也作为中国科技网<code>AS7497</code>的IPv6出口（当然目前科技网已经自己另立门户了）。IPv6北美方向接入了共10G的Cogent和HE，<del>香港方向10G的HKIX，其中香港方向由于自有PNI导致很难互联上，负载低速度很快</del>。</p><p>2020年，<code>4538</code>和<code>23911</code>与HKIX的互联点分别以直接和间接的形式接入并开放，并且互联点陆续变更为<code>cernetedu1-lacp-10g</code>和<code>cernet1-lacp-10g</code>，标志着教育网的IPv4和IPv6网络分别与HKIX建立了至少2*10G（总计40G以上）的互联。</p><blockquote><p><strong>LACP</strong>：链路聚合技术。HKIX能够提供的主流物理端口仅有1G/10G/100G等，当你的需求介于二者之间或者更高的时候，HKIX会用链路聚合使多个物理端口融合为一个互联点提供服务，并在PTR中以LACP作为标记。</p></blockquote><hr><h2 id="五，中国科技网"><a href="#五，中国科技网" class="headerlink" title="五，中国科技网"></a>五，中国科技网</h2><p>中国科技网（<code>AS7497</code>）是由中科院运营的中国学术网络，接入单位为中科院直属单位及高校，骨干网<code>159.226</code>。科技网只有香港一个出口，接驳了Cogent、PCCW和HKIX，容量都不是非常大，由于骨干网负载低速度并不慢。</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/2020-08-25_10-50-41.png#vwid=680&vhei=244" alt="img"></p><p>另外有一根10G的网络到达欧洲教育网GEANT，延迟也不错；不过科技网受众很小，价格也不便宜，这里也就简单提一句罢了。</p><hr><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p>写这篇文章的目的，一简单谈一下服务器链路怎么看，再就是给三大运营商说两句话；整篇文章是基于博主的一些认知做的描述，不能作为严谨的论述证据引用，可能存在一些谬误，希望大家发现后予以指正。</p><p>三大运营商的国际出口并不是想扩容就能扩容，运营商之间的互联也是永远是永恒不变的利益，作为运营商都更希望将流量留在自己网内而不在互联上花更多的钱，这也是一种互联互通发展的阻碍。</p><blockquote><p>2020年6月，城域网IPv6流入流量<strong>4454.63Gbps</strong>、流出流量<strong>2285.40Gbps</strong>。<br>中国电信：<strong>1045.15Gbps</strong>（入） /<strong>718.11Gbps</strong>（出）<br>中国移动：<strong>1335.54Gbps</strong>（入） /<strong>602.29Gbps</strong>（出）<br>中国联通：<strong>2053.10Gbps</strong>（入） /<strong>948.80Gbps</strong>（出）<br>教育网： <strong>20.84Gbps</strong>（入） /<strong>16.20Gbps</strong>（出）<br>城域网IPv6流入流量占比：中国电信1.29%、中国移动1.83%、中国联通1.53%。</p></blockquote><p>国内互联基础设施的建设成果诸位有目共睹，根据国家IPv6发展平台的流量数据及占比反推三大运营商城域网流量流入峰值已达到300T以上，世界上绝对找不出第二个国家或地区的运营商能够承受如此大的流量。至于用国外服务器感受到的全球畅通感，很大程度上是受益于机房间的互联容量充裕，如果你使用欧美普通家宽访问一些诸如Cogent的廉价单线网络，连通质量便不再是那么光鲜亮丽。</p><p>国内国际出口总量还是不少，中国与韩国类似，但是问题在于政策因素使得境外主流服务商无法在大陆设置CDN节点、无备案网站无法使用国内的CDN，本应在末端获取的信息全部压到了国际出口，这是一种很严重的浪费。境内设置CDN比如Steam的游戏下载，CDN放在了国内，基本上可以当作测网速的存在。最后还是希望有一天，政策能够做出一些改变（当然这可能是不切实际的）。</p><p>有时候也要多一份理解，横向对比，其实国内的网络不是你们口中的“局域网”，也不是所传口中那么不堪。</p><p>转载至 <a href="https://luotianyi.vc/4242.html">https://luotianyi.vc/4242.html</a> 十分感谢</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于CloudFlare的DDNS解析 进阶版</title>
      <link href="21ac.html"/>
      <url>21ac.html</url>
      
        <content type="html"><![CDATA[<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>要自建DDNS服务，首先必须要有自己的域名且域名已经接入 Cloudflare （即DNS为CF提供的地址），另外就是使用阿里云解析、DNSPOD云解析、Cloudflare云解析等服务，本次教程以 Cloudflare 为例。</p><h4 id="1-获取CFKEY"><a href="#1-获取CFKEY" class="headerlink" title="1. 获取CFKEY"></a>1. 获取CFKEY</h4><p>打开网页：<a href="https://dash.cloudflare.com/profile">https://dash.cloudflare.com/profile</a></p><p>在页面下方找到【Global API Key】，点击右侧的View查看Key，并保存下来</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/cf-1.png" alt="img"></p><h4 id="2-设置用于-DDNS-解析的二级域名"><a href="#2-设置用于-DDNS-解析的二级域名" class="headerlink" title="2. 设置用于 DDNS 解析的二级域名"></a>2. 设置用于 DDNS 解析的二级域名</h4><p>在 Cloudflare 中新建一个A记录，如：ddns.yourdomain.com，指向 1.1.1.1<br>（可随意指定，如123.123.123.123等等，主要用于后续查看 DDNS 是否生效）</p><p><img src="https://cdn.jsdelivr.net/gh/zzfiu/pic/img/blog/cf-2.png" alt="img"></p><h4 id="3-下载-DDNS-脚本"><a href="#3-下载-DDNS-脚本" class="headerlink" title="3. 下载 DDNS 脚本"></a>3. 下载 DDNS 脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget  -N --no-check-certificate https://raw.githubusercontent.com/yulewang/cloudflare-api-v4-ddns/master/cf-v4-ddns.sh</span><br></pre></td></tr></table></figure><h4 id="4-修改-DDNS-脚本并填写相关信息"><a href="#4-修改-DDNS-脚本并填写相关信息" class="headerlink" title="4. 修改 DDNS 脚本并填写相关信息"></a>4. 修改 DDNS 脚本并填写相关信息</h4><p>您可在线使用 nano/vi/vim 等工具进行修改，也可以下载到本地进行修改再上传覆盖！<br>可以参考下面命令使用vi进行编辑</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi cf-v4-ddns.sh</span><br></pre></td></tr></table></figure><p>然后按小写字母 i 进入编辑模式</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> API key, see https://www.cloudflare.com/a/account/my-account,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里填写上一步获取的CFKEY</span></span><br><span class="line">CFKEY=</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入你需要解析用来DDNS解析的根域名 eg: example.com，比如我的域名是123.com，那么此处填写123.com</span></span><br><span class="line">CFZONE=</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登陆CF的Username, eg: user@example.com(即CF的登录邮箱)</span></span><br><span class="line">CFUSER=</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 填写用来DDNS解析的二级域名，与上面设置的要一致, eg: ddns.yourdomain.com（例 ddns.123.com）</span></span><br><span class="line">CFHOST=</span><br></pre></td></tr></table></figure><p>全部填写完毕后按左上角的Esc退出编辑模式，然后输入 :wq 它会自动保存并退出</p><h4 id="5-脚本授权并执行"><a href="#5-脚本授权并执行" class="headerlink" title="5. 脚本授权并执行"></a>5. 脚本授权并执行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x cf-v4-ddns.sh</span><br><span class="line">./cf-v4-ddns.sh</span><br></pre></td></tr></table></figure><blockquote><p>如果脚本相关信息填写正确，输出内容会显示当前母鸡IP，登录 Cloudflare <strong>DNS选项</strong> 查看之前设置的 1.1.1.1 已变为母鸡IP</p></blockquote><h4 id="6-设置定时任务"><a href="#6-设置定时任务" class="headerlink" title="6. 设置定时任务"></a>6. 设置定时任务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入 crontab -e  然后会弹出 vi 编辑界面，按小写字母 i 进入编辑模式，在文件里面添加一行：</span><br><span class="line"></span><br><span class="line">*/2 * * * * /root/cf-v4-ddns.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p><strong>如果您需要日志文件，上述代码请替换成下面代码</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">\#如果您需要日志文件，输入下面命令</span><br><span class="line">*/2 * * * * /root/cf-v4-ddns.sh &gt;&gt; /var/log/cf-ddns.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>至此，教程结束！</p><p>转载至 <a href="https://blog.natcloud.net/cf-ddns.html">https://blog.natcloud.net/cf-ddns.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="16107.html"/>
      <url>16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
